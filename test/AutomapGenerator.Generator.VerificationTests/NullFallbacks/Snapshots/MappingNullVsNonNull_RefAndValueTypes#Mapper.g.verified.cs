//HintName: Mapper.g.cs
// <auto-generated/>
namespace AutomapGenerator
{
    [global::System.CodeDom.Compiler.GeneratedCode("AutomapGenerator.SourceGenerator.MapperGenerator", "1.0.0.0")]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public class Mapper : IMapper
    {
        public TDestination Map<TDestination>(object source)
        {
            switch (source, typeof(TDestination))
            {
                case (AutomapGenerator.Generator.VerificationTests.NullFallbacks.Sources.SourceWithNullableValueTypes s, System.Type t) when t == typeof(AutomapGenerator.Generator.VerificationTests.NullFallbacks.Sources.DestinationForNullableValueTypes):
                    return (dynamic)MapInternal(s, new AutomapGenerator.Generator.VerificationTests.NullFallbacks.Sources.DestinationForNullableValueTypes());
                default:
                    throw new MappingException($"Mapping from {source.GetType().Name} to new {typeof(TDestination).Name} has not been configured.");
            }
        }

        public TDestination Map<TDestination>(object source, TDestination destination)
        {
            switch (source, destination)
            {
                case (AutomapGenerator.Generator.VerificationTests.NullFallbacks.Sources.SourceWithNullableValueTypes s, AutomapGenerator.Generator.VerificationTests.NullFallbacks.Sources.DestinationForNullableValueTypes d):
                    return (dynamic)MapInternal(s, d);
                default:
                    throw new MappingException($"Mapping from {source.GetType().Name} to existing {typeof(TDestination).Name} has not been configured.");
            }
        }

        private AutomapGenerator.Generator.VerificationTests.NullFallbacks.Sources.DestinationForNullableValueTypes MapInternal(AutomapGenerator.Generator.VerificationTests.NullFallbacks.Sources.SourceWithNullableValueTypes source, AutomapGenerator.Generator.VerificationTests.NullFallbacks.Sources.DestinationForNullableValueTypes destination)
        {
            destination.NonNullableRefSimpleMap = source.NonNullableRefType;
            destination.NonNullableRefMapWithStaticFallback = source.NullableRefType ?? "test";
            destination.NonNullableRefMapWithPropertyFallback = source.NullableRefType ?? source.NonNullableRefType;
            destination.NullableRefSimpleMap = source.NullableRefType;
            destination.NullableRefMapWithStaticFallback = source.NullableRefType ?? "test";
            destination.NullableRefMapWithPropertyFallback = source.NullableRefType ?? source.NonNullableRefType;
            destination.NonNullableValueSimpleMap = source.NonNullableValueType;
            destination.NonNullableValueMapWithStaticFallback = source.NullableValueType ?? 99;
            destination.NonNullableValueMapWithPropertyFallback = source.NullableValueType ?? source.NonNullableValueType;
            destination.NullableValueSimpleMap = source.NullableValueType;
            destination.NullableValueMapWithStaticFallback = source.NullableValueType ?? 99;
            destination.NullableValueMapWithPropertyFallback = source.NullableValueType ?? source.NonNullableValueType;

            return destination;
        }

        public global::System.Linq.IQueryable<TDestination> ProjectTo<TDestination>(global::System.Linq.IQueryable<object> source)
        {
            switch (source)
            {
                case global::System.Linq.IQueryable<AutomapGenerator.Generator.VerificationTests.NullFallbacks.Sources.SourceWithNullableValueTypes> s:
                    return ProjectInternal<TDestination>(s);
                default:
                    throw new MappingException($"Mapping from {source.GetType().Name} to new {typeof(TDestination).Name} has not been configured.");
            }
        }

        private global::System.Linq.IQueryable<TDestination> ProjectInternal<TDestination>(global::System.Linq.IQueryable<AutomapGenerator.Generator.VerificationTests.NullFallbacks.Sources.SourceWithNullableValueTypes> sourceQueryable)
        {
            switch (typeof(TDestination))
            {
                case System.Type t when t == typeof(AutomapGenerator.Generator.VerificationTests.NullFallbacks.Sources.DestinationForNullableValueTypes):
                    return global::System.Linq.Queryable.Cast<TDestination>(
                        global::System.Linq.Queryable.Select(sourceQueryable, source => new AutomapGenerator.Generator.VerificationTests.NullFallbacks.Sources.DestinationForNullableValueTypes()
                        {
                            NonNullableRefSimpleMap = source.NonNullableRefType,
                            NonNullableRefMapWithStaticFallback = source.NullableRefType ?? "test",
                            NonNullableRefMapWithPropertyFallback = source.NullableRefType ?? source.NonNullableRefType,
                            NullableRefSimpleMap = source.NullableRefType,
                            NullableRefMapWithStaticFallback = source.NullableRefType ?? "test",
                            NullableRefMapWithPropertyFallback = source.NullableRefType ?? source.NonNullableRefType,
                            NonNullableValueSimpleMap = source.NonNullableValueType,
                            NonNullableValueMapWithStaticFallback = source.NullableValueType ?? 99,
                            NonNullableValueMapWithPropertyFallback = source.NullableValueType ?? source.NonNullableValueType,
                            NullableValueSimpleMap = source.NullableValueType,
                            NullableValueMapWithStaticFallback = source.NullableValueType ?? 99,
                            NullableValueMapWithPropertyFallback = source.NullableValueType ?? source.NonNullableValueType
                        }));
                default:
                    throw new MappingException($"Mapping from {sourceQueryable.GetType().Name} to new {typeof(TDestination).Name} has not been configured.");
            }
        }
    }
}
